{"version":3,"sources":["components/Message.js","Main.js","App.js","reportWebVitals.js","index.js"],"names":["WhiteTextTypography","withStyles","root","color","Typography","GreyTextTypography","Message","props","state","date","Date","now","is_user","orientation","user","this","data","ListItem","alignItems","ListItemAvatar","Badge","variant","Avatar","style","backgroundColor","ListItemText","primary","component","textAlign","fontSize","minPeriod","secondary","Fragment","message","Component","WhiteTextField","borderColor","input","TextField","Main","message_data","loading","handleChange","bind","handleSubmit","event","console","log","setState","target","value","preventDefault","concat","Math","random","fetch","method","headers","Accept","body","JSON","stringify","then","response","contentType","get","json","isLoading","overflow","Paper","maxHeight","Grid","height","container","justify","maxWidth","direction","item","List","onSubmit","type","onChange","id","label","App","ReactDOM","render","document","querySelector","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cc576906.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Badge from \"@material-ui/core/Badge\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TimeAgo from \"react-timeago\";\n\nconst WhiteTextTypography = withStyles({\n  root: {\n    color: \"#FFFFFF\",\n  },\n})(Typography);\n\n\nconst GreyTextTypography = withStyles({\n  root: {\n    color: \"lightgrey\",\n  },\n})(Typography);\n\nclass Message extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: Date.now(),\n      is_user: false,\n    };\n  }\n\n  render() {\n    var user = this.props.user\n    let orientation;\n    var data = \"PB\"\n    if(user == \"Palico Bot\"){\n    data = \"PB\"\n    orientation = \"left\"\n    }\n\n    if(user == \"User\"){\n    data = \"U\"\n    orientation = \"right\"\n    }\n  \n    return (\n      <ListItem alignItems=\"flex-start\">\n        <ListItemAvatar>\n          <Badge color=\"primary\" variant=\"dot\">\n            <Avatar style={{ backgroundColor: \"#7289DA\" }}>\n              {data}\n              </Avatar>\n          </Badge>\n        </ListItemAvatar>\n        <ListItemText\n          primary={\n            <WhiteTextTypography\n              component=\"span\"\n              variant=\"body2\"\n              textAlign={orientation}\n            >\n              {this.props.user}&nbsp;&nbsp;\n              <GreyTextTypography\n                component=\"span\"\n                variant=\"caption\"\n                fontSize={1}\n              >\n                Today at {<TimeAgo date={this.state.date} minPeriod={5} />}\n              </GreyTextTypography>\n            </WhiteTextTypography>\n          }\n          secondary={\n            <React.Fragment>\n              <WhiteTextTypography component=\"span\" variant=\"body2\">\n                {this.props.message}\n              </WhiteTextTypography>\n            </React.Fragment>\n          }\n        />\n      </ListItem>\n    );\n  }\n}\n\nexport default Message;\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport Message from \"./components/Message\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport List from \"@material-ui/core/List\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst WhiteTextField = withStyles({\n  root: {\n    \"& label\": {\n      color: \"white\",\n    },\n    \"& .MuiOutlinedInput-root\": {\n      borderColor: \"#7289DA\",\n    },\n    \n  input: {\n    color: \"white\"\n  }\n        \n  },\n})(TextField);\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message_data: [\n        <Message message=\"Hi Meownster Hunter!\" user=\"Palico Bot\"></Message>,\n      ],\n      user: \"User\",\n      message: \"\",\n      loading: null,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    console.log(\"change\");\n    this.setState({ message: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(\"submit\");\n    this.setState({ user: \"User\" });\n    this.setState({\n      message_data: this.state.message_data.concat([\n        <Message\n          key={Math.random()}\n          message={this.state.message}\n          user={this.state.user}\n        ></Message>,\n      ]),\n    });\n    this.setState({ message: \"\" });\n    console.log(this.state.message_data);\n\n    fetch(\"https://palico-bot.herokuapp.com/api/\", {\n      method: \"POST\",\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Credentials\": true,\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        message: this.state.message,\n      }),\n    })\n      //issue request from frontend to backend\n      .then((response) => {\n        console.log(response);\n        const contentType = response.headers.get(\"Content-Type\");\n        console.log(contentType);\n        return response.json();\n      })\n      .then((data) => {\n        console.log(\"Here!\");\n      this.setState({\n        isLoading: false,\n        message_data: this.state.message_data.concat([\n          <Message\n            key={Math.random()}\n            message={data}\n            user=\"Palico Bot\"\n          ></Message>,\n        ]),\n      });\n      this.setState({\n        isLoading: true,\n      });\n      });\n    console.log(\"HandleSubmit complete.\");\n  }\n  render() {\n      this.state.message_data.concat([\n          <Message\n            key={Math.random()}\n            message={this.state.message} \n            user={this.state.user}\n          ></Message>,\n        ]);\n\n    return (\n      <body overflow=\"hidden\">\n        <Paper\n          style={{\n            textAlign: \"center\",\n            maxHeight: \"90%\",\n            backgroundColor: \"#23272A\",\n          }}\n        >\n          <br></br>\n          <Grid style={{ height: \"8vh\" }}>\n            <Typography\n              variant=\"title2\"\n              component=\"div\"\n              style={{ color: \"#FFFFFF\" }}\n            >\n              discord/#bot-test\n            </Typography>\n          </Grid>\n          <Grid\n            container\n            justify=\"center\"\n            alignItems=\"center\"\n            maxWidth=\"sm\"\n            style={{ backgroundColor: \"#2C2F33\", overflow: \"hidden\" }}\n            direction=\"column\"\n          >\n            <Grid item style={{ overflow: \"hidden\", height: \"80vh\" }}>\n              <List> \n                {this.state.message_data}</List>\n            </Grid>\n          </Grid>\n          <Grid style={{ height: \"15vh\" }}>\n            <Typography\n              variant=\"subtitle1\"\n              component=\"div\"\n              style={{ color: \"#FFFFFF\" }}\n            >\n              <form onSubmit={this.handleSubmit}>\n                   <WhiteTextField\n                    input\n                    type=\"text\"\n                    onChange={this.handleChange}\n                    id=\"outlined-basic\"\n                    variant=\"filled\"\n                    label=\"Message #bot-test\"\n                    value={this.state.message}\n                  />\n              </form>\n            </Typography>\n          </Grid>\n        </Paper>\n      </body>\n    );\n  }\n}\nexport default Main;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './Main';\n\nfunction App() {\n  return(\n  ReactDOM.render(<Main />, document.querySelector('#root'))\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}