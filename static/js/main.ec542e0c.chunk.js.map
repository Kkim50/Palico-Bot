{"version":3,"sources":["components/Message.js","Main.js","App.js","reportWebVitals.js","index.js"],"names":["WhiteTextTypography","withStyles","root","color","Typography","GreyTextTypography","Message","props","state","date","Date","now","is_user","user","this","data","ListItem","alignItems","ListItemAvatar","Badge","variant","Avatar","style","backgroundColor","ListItemText","primary","component","textAlign","fontSize","minPeriod","secondary","Fragment","message","Component","WhiteTextField","borderColor","TextField","Main","message_data","bot_flag","handleChange","bind","handleSubmit","event","console","log","setState","target","value","preventDefault","concat","Math","random","fetch","method","headers","body","JSON","stringify","then","response","contentType","get","json","overflow","Paper","maxHeight","Grid","height","container","justify","maxWidth","direction","item","List","onSubmit","input","type","onChange","id","label","App","ReactDOM","render","document","querySelector","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ec542e0c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Badge from \"@material-ui/core/Badge\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TimeAgo from \"react-timeago\";\n\nconst WhiteTextTypography = withStyles({\n  root: {\n    color: \"#FFFFFF\",\n  },\n})(Typography);\n\n\nconst GreyTextTypography = withStyles({\n  root: {\n    color: \"lightgrey\",\n  },\n})(Typography);\n\nclass Message extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: Date.now(),\n      is_user: false,\n    };\n  }\n\n  render() {\n    var user = this.props.user\n    var data = \"PB\"\n    if(user == \"Palico Bot\"){\n    data = \"PB\"\n    }\n\n    if(user == \"User\"){\n    data = \"U\"\n    }\n  \n    return (\n      <ListItem alignItems=\"flex-start\">\n        <ListItemAvatar>\n          <Badge color=\"primary\" variant=\"dot\">\n            <Avatar style={{ backgroundColor: \"#7289DA\" }}>\n              {data}\n              </Avatar>\n          </Badge>\n        </ListItemAvatar>\n        <ListItemText\n          primary={\n            <WhiteTextTypography\n              component=\"span\"\n              variant=\"body2\"\n              textAlign=\"left\"\n            >\n              {this.props.user}&nbsp;&nbsp;\n              <GreyTextTypography\n                component=\"span\"\n                variant=\"caption\"\n                fontSize={1}\n              >\n                Today at {<TimeAgo date={this.state.date} minPeriod={5} />}\n              </GreyTextTypography>\n            </WhiteTextTypography>\n          }\n          secondary={\n            <React.Fragment>\n              <WhiteTextTypography component=\"span\" variant=\"body2\">\n                {this.props.message}\n              </WhiteTextTypography>\n            </React.Fragment>\n          }\n        />\n      </ListItem>\n    );\n  }\n}\n\nexport default Message;\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport Message from \"./components/Message\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport List from \"@material-ui/core/List\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst WhiteTextField = withStyles({\n  root: {\n    \"& label\": {\n      color: \"white\",\n    },\n    \"& .MuiOutlinedInput-root\": {\n      borderColor: \"#7289DA\",\n    },\n  },\n})(TextField);\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message_data: [\n        <Message message=\"Hi Meownster Hunter!\" user=\"Palico Bot\"></Message>,\n        <Message\n          message=\"Find Keyquests: !Key rank\"\n          user=\"Palico Bot\"\n        ></Message>,\n        <Message\n          message=\"Find Item: !Item name rank \"\n          user=\"Palico Bot\"\n        ></Message>,\n      ],\n      user: \"User\",\n      message: \"\",\n      bot_flag: false,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    console.log(\"change\");\n    this.setState({ message: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(\"submit\");\n    this.setState({ user: \"User\" });\n    \n    this.setState({\n      message_data: this.state.message_data.concat([\n        <Message\n          key={Math.random()}\n          message={this.state.message}\n          user={this.state.user}\n        ></Message>,\n      ]),\n    });\n    this.setState({message: \"\"});\n    console.log(this.state.message_data);\n\n    fetch(\"https://palico-bot.herokuapp.com/api/\", {\n      method: \"POST\",\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Credentials\": true,\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message: this.state.message\n      }),\n    })\n      //issue request from frontend to backend\n      .then((response) => {\n        console.log(response);\n        const contentType = response.headers.get('Content-Type');\n        console.log(contentType);\n        return response.json();\n      })\n      .then((data) => {\n        console.log(\"Here!\")\n        this.setState({ message: data });\n        this.setState({ bot_flag: true });\n      });\n    console.log(\"HandleSubmit complete.\")\n  }\n\n  render() {\n\n    if(this.state.bot_flag == true){\n    this.setState({\n      message_data: this.state.message_data.concat([\n        <Message\n          key={Math.random()}\n          message={this.state.message}\n          user={this.state.user}\n        ></Message>,\n      ]),\n    });\n  }\n\n    return (\n      <body overflow=\"hidden\">\n        <Paper\n          style={{\n            textAlign: \"center\",\n            maxHeight: \"100%\",\n            backgroundColor: \"#23272A\",\n          }}\n        >\n          <br></br>\n          <Grid style={{ height: \"8vh\" }}>\n            <Typography\n              variant=\"title2\"\n              component=\"div\"\n              style={{ color: \"#FFFFFF\" }}\n            >\n              discord/#bot-test\n            </Typography>\n          </Grid>\n          <Grid\n            container\n            justify=\"center\"\n            alignItems=\"center\"\n            maxWidth=\"sm\"\n            style={{ backgroundColor: \"#2C2F33\", overflow: \"hidden\" }}\n            direction=\"column\"\n          >\n            <Grid item style={{ overflow: \"auto\", height: \"80vh\" }}>\n              <List>{this.state.message_data}</List>\n            </Grid>\n          </Grid>\n          <Grid style={{ height: \"8vh\" }}>\n            <Typography\n              variant=\"subtitle1\"\n              component=\"div\"\n              style={{ color: \"#FFFFFF\" }}\n            >\n              <form onSubmit={this.handleSubmit}>\n                <WhiteTextField\n                  input\n                  type=\"text\"\n                  onChange={this.handleChange}\n                  id=\"outlined-basic\"\n                  variant=\"filled\"\n                  label=\"Message #bot-test\"\n                  value={this.state.message}\n                />\n                <input type=\"submit\" message=\"Submit\" />\n              </form>\n            </Typography>\n          </Grid>\n        </Paper>\n      </body>\n    );\n  }\n}\nexport default Main;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './Main';\n\nfunction App() {\n  return(\n  ReactDOM.render(<Main />, document.querySelector('#root'))\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}